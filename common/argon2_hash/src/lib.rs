use argon2::{
    Argon2, PasswordHash, PasswordVerifier,
    password_hash::{PasswordHasher, SaltString, rand_core::OsRng},
};
use error::Result;

/// Password hasher and verifier implemented
/// with argon2id algorithm, which is recommended by OWASP.
/// See <https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html>
pub struct Argon2Hash;

impl Argon2Hash {
    /// Returns a hashed value of a password string
    pub fn hash_password(password: &str) -> Result<String> {
        let salt = SaltString::generate(&mut OsRng);
        Ok(Argon2::default()
            .hash_password(password.as_bytes(), &salt)?
            .to_string())
    }

    /// Verify if a password match with a hashed,
    /// assumes that hashed value is generated by [Argon2Hash]
    pub fn verify_password(password: &str, password_hash: &str) -> Result<()> {
        let password_hash = PasswordHash::new(password_hash)?;
        Ok(Argon2::default().verify_password(password.as_bytes(), &password_hash)?)
    }
}
